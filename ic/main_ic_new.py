# Authors: Andrei Variu Oct 2022 (andrei.variu@epfl.ch), Shadab Alam Nov 2021

# Generate lightcone for DESI mocks
# from HOD catalogues generated by Shadab

import argparse
import gc

from generate_light_cone import LightCone, Paths
from apply_survey_geometry_ic import SurveyGeometry

from stack_shells_into_fits import stack_shells

def cutsky_ic_ABACUS(args, galtype=None, redshift=None, snapshot=None, phaseN=0):

    config_file = "../ABACUS/config/config_ABACUS_ic.ini"

    ######### Instances
    lightcone_instance = LightCone(config_file, args)
    survey_geometry_instance = SurveyGeometry(config_file, args)

    # ######### CutSky
    phase = str(int(phaseN)).zfill(3)

    in_part_path = f"/AbacusSummit_base_c000_ph{phase}/"
    input_name = "ic_real_space.sub{subbox}.fits.gz"

    out_part_path = f"/AbacusSummit_base_c000_ph{phase}/hdf5/"
    output_name = "ic_ph" + phase + "_shell_{shellnum}.hdf5"

    path_instance = Paths(config_file, args, in_part_path, input_name, out_part_path, output_name)

    lightcone_instance.generate_shells(path_instance, cutsky=True, nproc=64, n_subboxes=64, cat_seed=phaseN)
    print("INFO: DONE WITH GENERATING SHELLS")
    gc.collect()
    ##survey_geometry_instance.shell(path_instance, nproc=64)
    ##print("INFO: DONE WITH APPLYING STATUS")
    ##gc.collect()
    ###########survey_geometry_instance.shell_series(path_instance)
    #    print('starts stack', path_instance.dir_out)
    ##out_fits = path_instance.dir_out + f"/{in_part_path}/cutsky_ic_{phase}.fits"
    ##stack_shells(survey_geometry_instance, inpath=path_instance.shells_out_path, out_file=out_fits, mock_random_ic="ic", ngc_sgc_tot="TOT", seed=phaseN)
    ##print("INFO: DONE WITH STACKING")



def main():
    parser = argparse.ArgumentParser()
    # parser.add_argument("config", help="ini file holding configuration", type=str)
    parser.add_argument("--dir_out", type=str, help="output directory (overrides config file)")
    parser.add_argument("--dir_in", type=str, help="input directory (same)")
    parser.add_argument("--input_name", type=str, help="name of input catalogs (same)")
    parser.add_argument("--galaxy", type=str, help="LRG QSO ELG")
    parser.add_argument("--phase", type=int, help="phase of the catalog")
    parser.add_argument("--ngc_sgc", type=str, help="NGC or SGC preferred rotation")
    parser.add_argument("--mock_random_ic", type=str, help="mock, random or ic")

    args = parser.parse_args()

    import time
    start = time.time()


    ### IC Abacus 2Gpc (To BE Tested)
#    for i in range(25):
    cutsky_ic_ABACUS(args, phaseN=args.phase)

    end = time.time()
    phase = args.phase
    print(f"################## FINISHED in {end-start} for phase {phase}")


if __name__ == '__main__':
    main()
